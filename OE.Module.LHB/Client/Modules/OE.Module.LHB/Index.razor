@using OE.Module.LHB.Services
@using OE.Module.LHB.Models

@namespace OE.Module.LHB
@inherits ModuleBase
@inject ILHBService LHBService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer

@if (_LHBs != null)
{

    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add LHB" ResourceKey="Add" />
    <br />
    <br />
    @if (@_LHBs.Count != 0)
    {
        <Pager Items="@_LHBs">
            <Header>
                <th style="width: 1px;">&nbsp;</th>
                <th style="width: 1px;">&nbsp;</th>
                <th>@Localizer["Name"]</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.LHBId.ToString())" ResourceKey="Edit"  /></td>
                <td><ActionDialog Header="Delete LHB" Message="Are You Sure You Wish To Delete This LHB?" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" ResourceKey="Delete"  /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>@Localizer["Message.DisplayNone"]</p>
    }
}

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<LHB> _LHBs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _LHBs = await LHBService.GetLHBsAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading LHB {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Delete(LHB LHB)
    {
        try
        {
            await LHBService.DeleteLHBAsync(LHB.LHBId, ModuleState.ModuleId);
            await logger.LogInformation("LHB Deleted {LHB}", LHB);
            _LHBs = await LHBService.GetLHBsAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting LHB {LHB} {Error}", LHB, ex.Message);
            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
        }
    }
}