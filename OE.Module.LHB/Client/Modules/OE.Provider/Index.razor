@using OE.Module.LHB.Services
@using OE.Module.LHB.Shared.Models

@namespace OE.Provider
@inherits ModuleBase
@inject ProviderService ProviderService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Loc

<MudDataGrid 
    Items="@_list" 
    T="M.Provider" 
    RowClick="@Selected"
    SortMode="SortMode.Multiple" 
    Filterable="true" 
    QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Loc["Title"]</MudText>
        <MudSpacer />
        <MudIconButton Title="New" Icon="@MudBlazor.Icons.Material.Filled.AddCard" Color="Color.Default" OnClick="Add" />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@MudBlazor.Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn >
            <CellTemplate>
                <MudIconButton 
                    Size="@Size.Small" 
                    Icon="@MudBlazor.Icons.Material.Outlined.Edit" 
                    OnClick="@(()=>Edit(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Description" />
    </Columns>
    <NoRecordsContent>
        <MudText>@Loc["Message.DisplayNone"]</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudDataGridPager T="M.Provider" />
    </PagerContent>
</MudDataGrid>

    
@code {

    List<M.Provider> _list;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _list = await ProviderService.GetProvidersAsync();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Providers {Error}", ex.Message);
            AddModuleMessage(Loc["Message.LoadError"], MessageType.Error);
        }
    }

    private Func<M.Provider, bool> _quickFilter => x =>
       {
       if (string.IsNullOrWhiteSpace(_searchString))
           return true;

       if (x.Name !=null && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;

       if (x.Description !=null && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
           return true;


       return false;
       };

    private async Task Delete(M.Provider item)
    {
        try
        {
            await ProviderService.DeleteProviderAsync(item.ProviderId);
            await logger.LogInformation("Provider Deleted {item}", item);
            _list = await ProviderService.GetProvidersAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Provider {item} {Error}", item, ex.Message);
            AddModuleMessage(Loc["Message.DeleteError"], MessageType.Error);
        }
    }

    private void Selected(DataGridRowClickEventArgs<M.Provider> args)
    {
        var url = EditUrl("Detail",$"id={args.Item.ProviderId}");
        NavigationManager.NavigateTo(url);
    }
    
    private void Edit(M.Provider item)
    {
        var url = EditUrl("Detail", $"id={item.ProviderId}");
        NavigationManager.NavigateTo(url);
    }

    private void Add()
    {
        var url = EditUrl("Add");
        NavigationManager.NavigateTo(url);
    }
}