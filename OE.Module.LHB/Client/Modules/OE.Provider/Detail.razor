@namespace OE.Provider
@using Microsoft.AspNetCore.Components.Forms
@using OE.Module.LHB.Services
@inherits ModuleBase
@inject ProviderService ProviderService
@inject AddressService AddressService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer
@inject IDialogService DialogService

@if (_model != null)
{
    <EditForm @ref="form" Model="@_model"
              OnValidSubmit="OnValidSubmit"
              OnInvalidSubmit="OnInvalidSubmit">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">@Localizer["Title"]</MudText>
            </MudCardHeader>
            <MudCardContent>
                <DataAnnotationsValidator/>
                <MudTextField Label="@Localizer["Name"]" @bind-Value="_model.Name" For="@(() => _model.Name)"/>
                <MudTextField Label="@Localizer["Description"]" @bind-Value="_model.Description" For="@(() => _model.Description)"/>
                <MudTextField Label="@Localizer["WebAddress"]" @bind-Value="_model.WebAddress" For="@(() => _model.WebAddress)"/>
                <MudTextField Label="@Localizer["EmailAddress"]" @bind-Value="_model.EmailAddress" For="@(() => _model.EmailAddress)"/>
                <MudTextField Label="@Localizer["HoursOfOperation"]" @bind-Value="_model.HoursOfOperation" For="@(() => _model.HoursOfOperation)"/>

                <MudField Label="Services" Variant="Variant.Outlined">
                    <MudButton Color="Color.Primary" OnClick="@(()=> AddAttributes())">@Localizer["Add"]</MudButton>
                    @if (_model.ProviderAttributes.Any())
                    {
                        <ProviderAttribute Attributes="@_model.ProviderAttributes" OnDelete="DeleteAttribute"></ProviderAttribute>
                    }
                </MudField>


                <MudField Label="Address(es)" Variant="Variant.Outlined">
                    <MudButton Color="Color.Default" OnClick="@(()=> AddAddr())">@Localizer["Add"]</MudButton>
                    @if (_model.Addresses.Any() )
                    {
                        @foreach (var addr in _model.Addresses)
                        {
                            <Address Addr="@addr" OnDelete="DeleteAddr"></Address>
                        }
                    }
                </MudField>

                <MudField Label="Phone Numbers(s)" Variant="Variant.Outlined">
                    <MudButton Color="Color.Default" OnClick="@(()=> AddAddr())">@Localizer["Add"]</MudButton>
                    @if (_model.PhoneNumbers.Any())
                    {
                        @foreach (var phone in _model.PhoneNumbers)
                        {
                            <MudCard>
                                <MudCardContent>
                                    <MudTextField Label="@Localizer["AreaCode"]" @bind-Value="phone.AreaCode" For="@(() => phone.AreaCode)" />
                                    <MudTextField Label="@Localizer["Number"]" @bind-Value="phone.Number" For="@(() => phone.Number)" />
                                    <MudTextField Label="@Localizer["Extension"]" @bind-Value="phone.Extension" For="@(() => phone.Extension)" />
                                    <MudTextField Label="@Localizer["Description"]" @bind-Value="phone.Description" For="@(() => phone.Description)" />
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Color="Color.Warning" OnClick="@(() => DeletePhone(phone))">@Localizer["Delete"]</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    }
                </MudField>

                <ValidationSummary @ref="summary"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Secondary" OnClick="Back">@Localizer["Back"]</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@Localizer["Save"]</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {
    EditForm form;

    ValidationSummary summary;

    //public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.View;
    public override string Actions => "Detail";
    public override string Title => "Provider Details";
    public override bool UseAdminContainer => false;
    private int _id;
    private ProviderViewModel _model;

    bool success;
    string[] errors = { };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _id = int.Parse(PageState.QueryString["id"]);
            await Refresh();

        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading LHB {id} {message}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Refresh()
    {
        _model = await ProviderService.GetProviderViewModelAsync(_id);
    }

    protected override async Task OnParametersSetAsync()
    {
        var foo = 1;
    }

    private void Back()
    {
        NavigationManager.NavigateTo(NavigateUrl());
    }

    private void OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            try
            {
                ProviderService.UpdateProviderAsync(_model);
                AddModuleMessage(Localizer["Message.UpdateSuccess"], MessageType.Success);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error Saving LHB {id} {message}", _id, ex.Message);
                AddModuleMessage(Localizer["Message.UpdateError"], MessageType.Error);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
    }

    private void OnInvalidSubmit(EditContext context)
    {
        var foo = 0;
    }

    private async Task DeleteAddr(M.Address addr)
    {
        await AddressService.DeleteAddressAsync(addr.AddressId);
        await Refresh();
    }

    private async Task DeleteAttribute(ProviderAttributeViewModel item)
    {
        await ProviderService.DeleteAttributeAsync(item.ProviderAttributeId);
        await Refresh();
    }

    private async Task AddAddr()
    {
        var parameters = new DialogParameters<AddAddress>();
        parameters.Add(x => x.Id, _id);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddAddress>("Add Address", parameters, options);
        await Refresh();
    }

    private async Task AddAttributes()
    {
        var parameters = new DialogParameters<AddAttribute>();
        parameters.Add(x => x.Id, _id);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddAttribute>("Add Service", parameters, options);
        await Refresh();
    }


    private void DeletePhone(M.PhoneNumber phone)
    {
        // ask if they are sure
        // delete
    }

  
}