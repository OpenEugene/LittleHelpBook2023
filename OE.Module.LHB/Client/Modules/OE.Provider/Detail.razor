@namespace OE.Provider
@using Microsoft.AspNetCore.Components.Forms
@using OE.Module.LHB.Services
@inherits ModuleBase
@inject ProviderService ProviderService
@inject AddressService AddressService
@inject PhoneNumberService PhoneNumberService 
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer

@inject IJSRuntime JsRuntime //Used for confirmation dialog

@if (_model != null)
{
    <EditForm @ref="form" Model="@_model"
              OnValidSubmit="OnValidSubmit"
              OnInvalidSubmit="OnInvalidSubmit">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">@Localizer["Title"]</MudText>
            </MudCardHeader>
            <MudCardContent>
                <DataAnnotationsValidator/>
                <MudTextField Label="@Localizer["Name"]" @bind-Value="_model.Name" For="@(() => _model.Name)"/>
                <MudTextField Label="@Localizer["Description"]" @bind-Value="_model.Description" For="@(() => _model.Description)"/>
                <MudTextField Label="@Localizer["WebAddress"]" @bind-Value="_model.WebAddress" For="@(() => _model.WebAddress)"/>
                <MudTextField Label="@Localizer["EmailAddress"]" @bind-Value="_model.EmailAddress" For="@(() => _model.EmailAddress)"/>
                <MudTextField Label="@Localizer["HoursOfOperation"]" @bind-Value="_model.HoursOfOperation" For="@(() => _model.HoursOfOperation)"/>
                <MudField Label="Address(es)"/>
                <MudButton Color="Color.Primary" OnClick="@(()=> AddAddr())">@Localizer["Add Address"]</MudButton>
                
                @if (_orderedAddresses.Any())
                {
                    @foreach (var addr in _orderedAddresses)
                    {
                        <Address Addr="@addr" OnDelete="DeleteAddr"></Address>
                    }
                }
                <MudField Label="Phone Number(s)"/>
                <MudButton Color="Color.Primary" OnClick="@(()=> AddPhone())">@Localizer["Add Phone Number"]</MudButton>

                @if (_orderedPhoneNumbers.Any())
                {
                    @foreach (var phone in _orderedPhoneNumbers )
                    {
                        <PhoneNumber Phone="@phone" OnDelete="DeletePhoneNumber"></PhoneNumber>
                    }
                }

                <ValidationSummary @ref="summary"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Secondary" OnClick="Back">@Localizer["Back"]</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@Localizer["Save"]</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {    
    EditForm form;

   ValidationSummary summary;
    public override string Actions => "Detail";
    public override string Title => "Provider Details";
    public override bool UseAdminContainer => false;
    private int _id;
    private ProviderViewModel _model;

    private List<M.PhoneNumber> _orderedPhoneNumbers;
    private List<M.Address> _orderedAddresses;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _id = int.Parse(PageState.QueryString["id"]);
            _model = await ProviderService.GetProviderViewModelAsync(_id);
            _orderedPhoneNumbers = _model.PhoneNumbers.OrderByDescending(p => p.IsActive).ToList();
            _orderedAddresses = _model.Addresses.OrderByDescending(a => a.IsActive).ToList();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading LHB {id} {message}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var foo = 1;
    }

    private void Back()
    {
        NavigationManager.NavigateTo(NavigateUrl());
    }

    private void OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            try
            {
                ProviderService.UpdateProviderAsync(_model);
                AddModuleMessage(Localizer["Message.UpdateSuccess"], MessageType.Success);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error Saving LHB {id} {message}", _id, ex.Message);
                AddModuleMessage(Localizer["Message.UpdateError"], MessageType.Error);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
    }

    private void OnInvalidSubmit(EditContext context)
    {
        var foo = 0;
    }

    private async Task DeleteAddr(M.Address addr)
    {
        // ask if they are sure
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this address?");
        if (confirmed)
        {
            await AddressService.DeleteAddressAsync(addr.AddressId);
            NavigationManager.NavigateTo(NavigationManager.Uri);
        }
    }

    private void AddAddr()
    {
        var url = EditUrl("AddAddress", $"id={_id}");
        NavigationManager.NavigateTo(url);
    }

    private void AddPhone()
    {
        var url = EditUrl("AddPhoneNumber", $"id={_id}");
        NavigationManager.NavigateTo(url);
    }
    private async Task DeletePhoneNumber(M.PhoneNumber phone)
    {
        // ask if they are sure
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Is your hovercraft full of eels?");
        if (confirmed)
        {
            await PhoneNumberService.DeletePhoneNumberAsync(phone.PhoneNumberId);
            NavigationManager.NavigateTo(NavigationManager.Uri);
        }
    }

  
}