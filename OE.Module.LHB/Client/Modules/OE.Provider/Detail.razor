@using Microsoft.AspNetCore.Components.Forms

@using Oqtane.Modules.Controls
@using OE.Module.LHB.Services
@using System.ComponentModel.DataAnnotations

@namespace OE.Provider
@inherits ModuleBase
@inject ProviderService ProviderService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">@Localizer["Title"]</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if(_model!=null){
            <MudTextField Label="@Localizer["Name"]" @bind-Value="_model.Name" />

            @foreach(M.Address addr in _model.Addresses)
            {
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="@Localizer["Address"]" @bind-Value="addr.Address1"  />
                        <MudTextField Label="@Localizer["City"]" @bind-Value="addr.City" />
                        <MudTextField Label="@Localizer["State"]" @bind-Value="addr.State"  />
                        <MudTextField Label="@Localizer["PostalCode"]" @bind-Value="addr.PostalCode"  />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Warning" OnClick="@(()=>Delete(addr))">@Localizer["Delete"]</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        }
        
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Secondary" OnClick="Back" >@Localizer["Back"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">@Localizer["Save"]</MudButton>
    </MudCardActions>
</MudCard>

@code {
    MudForm form;
    //public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.View;

    public override string Actions => "Detail";

    public override string Title => "Provider Details";
    private int _id;
    private ProviderViewModel _model;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            _id = Int32.Parse(PageState.QueryString["id"]);
            _model = await ProviderService.GetProviderViewModelAsync(_id);

        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading LHB {id} {message}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var foo = 1;
    }

    private void Back()
    {
        NavigationManager.NavigateTo(NavigateUrl());

    }

    private void Save()
    {
      
    }

    private void Delete(M.Address addr)
    {
       // ask if they are sure
        // delete

    }

}
