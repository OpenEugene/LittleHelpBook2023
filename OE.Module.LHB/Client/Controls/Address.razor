@inherits ModuleControlBase
@inject IStringLocalizer<OE.Provider.Edit> Localizer
@inject NavigationManager NavigationManager
@namespace OE.Module.LHB.Client.Controls

@if (Addr != null)
{
    <MudCard>
        <MudCardContent>
            <MudTextField Label="@Localizer["Address"]" @bind-Value="Addr.Address1" For="@(() => Addr.Address1)" />
            <MudTextField Label="@Localizer["City"]" @bind-Value="Addr.City" For="@(() => Addr.City)" />
            <MudTextField Label="@Localizer["State"]" @bind-Value="Addr.State" For="@(() => Addr.State)" />
            <MudTextField Label="@Localizer["PostalCode"]" @bind-Value="Addr.PostalCode" For="@(() => Addr.PostalCode)" />
            <MudSelect  @bind-Value="@Addr.IsActive" Label="Is Active">
                <MudSelectItem Value="@(false)">False</MudSelectItem>
                <MudSelectItem Value="@(true)">True</MudSelectItem>
            </MudSelect>
        </MudCardContent>
        <MudCardActions>

            @if (OnDelete.HasDelegate)
            {
                <MudButton Color="Color.Warning" OnClick="@(() => DeleteAddr(Addr))">@Localizer["Delete"]</MudButton>
            }
        </MudCardActions>
    </MudCard>
}
@code {
    [Parameter] public M.Address Addr { get; set; }
    [Parameter] public EventCallback<M.Address> OnDelete { get; set; }

    public bool thisFuckingValue { get => Addr.IsActive; set => Addr.IsActive = value; }

    private async Task DeleteAddr(M.Address addr)
    {
        await OnDelete.InvokeAsync(addr);
        var url = EditUrl("Detail", $"id={Addr.ProviderId}");
        NavigationManager.NavigateTo(url);
    }

   
}
